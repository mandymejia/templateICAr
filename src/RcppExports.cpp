// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// UpdateTheta_FCtemplateICAcpp
Rcpp::List UpdateTheta_FCtemplateICAcpp(Eigen::MatrixXd template_mean, Eigen::MatrixXd template_var, Rcpp::List template_FC, Eigen::MatrixXd G, Eigen::VectorXd prior_params, Eigen::MatrixXd BOLD, Rcpp::List post_sums, double sigma2_alpha, bool verbose);
RcppExport SEXP _templateICAr_UpdateTheta_FCtemplateICAcpp(SEXP template_meanSEXP, SEXP template_varSEXP, SEXP template_FCSEXP, SEXP GSEXP, SEXP prior_paramsSEXP, SEXP BOLDSEXP, SEXP post_sumsSEXP, SEXP sigma2_alphaSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type template_mean(template_meanSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type template_var(template_varSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type template_FC(template_FCSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type prior_params(prior_paramsSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type BOLD(BOLDSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type post_sums(post_sumsSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_alpha(sigma2_alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(UpdateTheta_FCtemplateICAcpp(template_mean, template_var, template_FC, G, prior_params, BOLD, post_sums, sigma2_alpha, verbose));
    return rcpp_result_gen;
END_RCPP
}
// Gibbs_AS_posteriorCPP
Rcpp::List Gibbs_AS_posteriorCPP(const int nsamp, const int nburn, const Eigen::MatrixXd template_mean, const Eigen::MatrixXd template_var, Eigen::MatrixXd S, Eigen::MatrixXd A, const Eigen::MatrixXd G, const Eigen::VectorXd tau_v, const Eigen::MatrixXd Y, const Eigen::VectorXd alpha, bool final);
RcppExport SEXP _templateICAr_Gibbs_AS_posteriorCPP(SEXP nsampSEXP, SEXP nburnSEXP, SEXP template_meanSEXP, SEXP template_varSEXP, SEXP SSEXP, SEXP ASEXP, SEXP GSEXP, SEXP tau_vSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP finalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nsamp(nsampSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type template_mean(template_meanSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type template_var(template_varSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type S(SSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type tau_v(tau_vSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type final(finalSEXP);
    rcpp_result_gen = Rcpp::wrap(Gibbs_AS_posteriorCPP(nsamp, nburn, template_mean, template_var, S, A, G, tau_v, Y, alpha, final));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_templateICAr_UpdateTheta_FCtemplateICAcpp", (DL_FUNC) &_templateICAr_UpdateTheta_FCtemplateICAcpp, 9},
    {"_templateICAr_Gibbs_AS_posteriorCPP", (DL_FUNC) &_templateICAr_Gibbs_AS_posteriorCPP, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_templateICAr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
